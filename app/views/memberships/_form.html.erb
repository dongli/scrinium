<%= simple_form_for membership do |f| %>
  <%= f.hidden_field :host_type, value: host.class %>
  <%= f.hidden_field :host_id, value: host.id %>
  <%= f.hidden_field :join_type, value: join_type %>
  <%= f.hidden_field :last_user_id, value: current_user.id %>
  <% case join_type %>
  <% when :self %>
    <% if membership.status == 'rejected' %>
      <div class='center'>
        <%= f.input :rejected_reason, as: :text %>
        <%= f.hidden_field :status, value: 'rejected' %>
        <%= f.hidden_field :rejected_at, value: Time.now %>
        <%= f.button :submit, t('membership.action.confirm'), class: 'button btn-xs' %>
      </div>
    <% else %>
      <%= f.hidden_field :user_id, value: current_user.id %>
      <div class='center'>
        <%= f.button :submit, t('membership.action.apply'), class: 'button btn-xs' %>
      </div>
    <% end %>
  <% when :invited %>
    <%= f.input :user_id, label: false, as: :select, class: "js-data-example-ajax", input_html: {style: 'width: 100%;' } %>
    <%#= f.input :user_id, label: false, as: :select, collection: User.all %>
    <div class='center'>
      <%= f.button :submit, t('membership.action.invite'), class: 'button btn-xs' %>
    </div>
  <% end %>
<% end %>
<script>

  function formatRepo (user) {
    console.log(user)
    if (user.loading) return user.text;

    var markup = "<div class='select2-users clearfix'>" +
//            "<div class='select2-users-avatar'><img src='" + user.profile.small_avatar_url + "' /></div>" +
            "<div class='select2-users-name'>" + user.name +
            "<div class='select2-users-email'>" + user.email + "</div>" +
            "</div></div>";

    return markup;
  }

  function formatRepoSelection (user) {
    return user.name
  }

  $("#membership_user_id").select2({
    ajax: {
      url: "/api/v1/users",
      dataType: 'json',
      delay: 300,
      data: function (params) {
        return {
          q: params.term // search term

        };
      },
      processResults: function (data, params) {
        // parse the results into the format expected by Select2
        // since we are using custom formatting functions we do not need to
        // alter the remote JSON data, except to indicate that infinite
        // scrolling can be used

        return {
          results: data.users
        };
      },
      cache: true
    },
    escapeMarkup: function (markup) { return markup; }, // let our custom formatter work
    templateResult: formatRepo, // omitted for brevity, see the source of this page
    templateSelection: formatRepoSelection, // omitted for brevity, see the source of this page
    minimumInputLength: 2

  });
</script>